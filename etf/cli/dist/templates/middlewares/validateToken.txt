import { Logger } from "etf-core";
import * as jwt from "jsonwebtoken";
import * as bcrypt from "bcrypt-nodejs";

export class ValidateToken {
  private secret: string = "12345";
  private refresh: string = "123";
  private expiry: number = 600;
  private logger: Logger = new Logger();

  public isValid(req: any): boolean {
    let res = true;
    try {
      const _token = this.getToken(req);
      if (!_token) {
        res = false;
      } else {
        const decode: any = jwt.decode(_token);
        console.log(decode);
        let date = new Date();
        let currentEpoch = date.getTime() / 1000;
        if (decode.exp > currentEpoch) {
          return false;
        } else {
        }
      }
    } catch (err) {
      res = false;
    }
    return res;
  }
  public getToken(req: any): string {
    if (
      req.headers.authorization &&
      req.headers.authorization.split(" ")[0] === "Bearer"
    ) {
      return req.headers.authorization.split(" ")[1];
    } else if (req.query && req.query.token) {
      return req.query.token;
    }

    return "";
  }

  async login(username: string, repo: any) {
    try {
      const data = await repo.findOne({ where: { username: username } });
      this.logger.info("Data:::", data);
      return data;
    } catch (err) {
      this.logger.error(JSON.stringify(err));
      return false;
    }
  }
  generateToken(res: any, username: string, password: string): any {
    if (res) {
      let isMatch = this.comparePassword(password, res.password);
      if (!isMatch) {
        return {
          error: ["Password does not match!"],
        };
      } else {
        const token = jwt.sign(
          { username, password, user_type: res.user_type },
          this.secret,
          {
            expiresIn: this.expiry,
          }
        );
        const refreshToken = jwt.sign({ username, password }, this.refresh);
        console.log(refreshToken, "ccoznscusziobnodivaiounbviauwbiuwaebviuawb");
        res.tokens = undefined;
        res.password = undefined;
        return {
          res,
          token,
          token_expiry: this.expiry,
          refresh: refreshToken,
        };
      }
    } else {
      return {
        error: ["User not found!"],
      };
    }
  }

  private comparePassword(
    _requestPassword: string,
    _responsePassword: string
  ): any {
    let x = bcrypt.compareSync(_requestPassword, _responsePassword);
    return x;
  }

  async refreshToken(req: any, repo: any) {
    const _token = this.getToken(req);
    if (_token === "") {
      return {
        error: ["Invalid Token!"],
      };
    } else {
      try {
        const decode: any = jwt.decode(_token);
        let username = decode.username;
        let password = decode.password;
        let res = await this.login(username, repo);
        if (res) {
          let isMatch = this.comparePassword(password, res.password);
          if (!isMatch) {
            return {
              error: ["Password does not match!"],
            };
          } else {
            const token = jwt.sign(
              { username, password, user_type: res.user_type },
              this.secret,
              {
                expiresIn: this.expiry,
              }
            );
            res.tokens = undefined;
            res.password = undefined;
            return {
              res,
              token,
              token_expiry: this.expiry,
            };
          }
        } else {
          return {
            error: ["User not found!"],
          };
        }
      } catch (err) {
        return { error: ["Unauthorized"] };
      }
    }
  }
}
